import React from "react";

export const components = {
  "data-table": {
    name: "data-table",
    type: "registry:block",
    registryDependencies: [
      "button",
      "checkbox",
      "dropdown-menu",
      "avatar",
      "command",
      "calendar",
      "select",
      "popover",
      "separator",
      "input",
      "table",
      "skeleton",
    ],
    dependencies: [
      "lucide-react",
      "@tanstack/react-table",
      "@radix-ui/react-icons",
    ],
    files: [
      {
        type: "registry:block",
        content:
          '"use client";\n\nimport * as React from "react";\nimport {\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from "@tanstack/react-table";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from "@/components/ui/table";\n\nimport { columns } from "./columns";\n\nconst data: Payment[] = [\n  {\n    id: "m5gr84i9",\n    amount: 316,\n    status: "active",\n    notes: "This is a note",\n    date: "2022-01-01",\n    employee: {\n      name: "John Doe",\n      avatar: "https://github.com/DanielaSimoes-WeAreMeta.png",\n      id: 1,\n    },\n    is_active: false,\n  },\n  {\n    id: "3u1reuv4",\n    amount: 242,\n    status: "inactive",\n    notes: "This is a note",\n    date: "2022-01-01",\n    employee: {\n      name: "John Doe",\n      avatar: "https://github.com/ranirosa.png",\n      id: 1,\n    },\n    is_active: true,\n  },\n  {\n    id: "derv1ws0",\n    amount: 837,\n    status: "inactive",\n    notes: "This is a note",\n    date: "2022-01-01",\n    employee: {\n      name: "John Doe",\n      avatar: "https://github.com/jaomateus.png",\n      id: 1,\n    },\n    is_active: true,\n  },\n  {\n    id: "5kma53ae",\n    amount: 874,\n    status: "active",\n    notes: "This is a note",\n    date: "2022-01-01",\n    employee: {\n      name: "John Doe",\n      avatar: "https://github.com/jaomateus.png",\n      id: 1,\n    },\n    is_active: false,\n  },\n  {\n    id: "bhqecj4p",\n    amount: 721,\n    status: "inactive",\n    notes: "This is a note",\n    date: "2022-01-01",\n    employee: {\n      name: "John Doe",\n      avatar: "https://github.com/ranirosa.png",\n      id: 1,\n    },\n    is_active: true,\n  },\n];\n\nexport type Payment = {\n  id: string;\n  amount: number;\n  status: "active" | "inactive";\n  notes: string;\n  date: string;\n  employee: {\n    name: string;\n    avatar: string;\n    id: number;\n  };\n  is_active: boolean;\n};\n\nexport default function DataTable() {\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  );\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({});\n  const [rowSelection, setRowSelection] = React.useState({});\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  });\n\n  return (\n    <div className="w-full">\n      <div\n        className="rounded-md border"\n        style={{\n          borderRadius: "0.5rem 0.5rem 0 0",\n        }}\n      >\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && "selected"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className="h-24 text-center"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className="flex justify-end px-6 py-3 border-l border-r border-b rounded-b-md">\n        <p className="text-gray-700 text-sm">\n          Showing {table.getRowModel().rows.length} of X\n        </p>\n      </div>\n    </div>\n  );\n}\n',
        path: "block/data-table/data-table.tsx",
        target: "components/block/data-table/data-table.tsx",
      },
      {
        type: "registry:block",
        content:
          '"use client";\n\nimport * as React from "react";\nimport { ColumnDef } from "@tanstack/react-table";\nimport { ChevronDown, MoreHorizontal, Check, XCircle } from "lucide-react";\n\nimport { Button } from "@/components/ui/button";\nimport { Checkbox } from "@/components/ui/checkbox";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from "@/components/ui/dropdown-menu";\nimport { Payment } from "./data-table";\nimport { ColumnFilter } from "./column-filter";\nimport { Avatar, AvatarFallback } from "@/components/ui/avatar";\nimport { AvatarImage } from "@radix-ui/react-avatar";\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    id: "select",\n    meta: { type: "select" },\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && "indeterminate")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label="Select all"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label="Select row"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: "status",\n    header: ({ column, table }) => {\n      return (\n        <ColumnFilter\n          column={column}\n          table={table}\n          options={[\n            {\n              id: 1,\n              name: "Active",\n              value: "active",\n              label: "Active",\n            },\n            {\n              id: 2,\n              name: "Inactive",\n              value: "inactive",\n              label: "Inactive",\n            },\n            {\n              id: 3,\n              name: "Pending",\n              value: "pending",\n              label: "Pending",\n            },\n          ]}\n        >\n          <Button className="p-0 text-body-large gap-2.5" variant="ghost">\n            <span>Status</span>\n            <ChevronDown className="h-4 w-4" />\n          </Button>\n        </ColumnFilter>\n      );\n    },\n    meta: { type: "select" },\n\n    cell: ({ row }) => (\n      <div className="capitalize text-gray-700">\n        {row.getValue("status") === "active" ? (\n          <div className="flex justify-center w-max py-1.5 px-2 bg-[#29C770] rounded-lg">\n            <p className="text-sm text-white font-semibold text-center">\n              {" "}\n              {row.getValue("status")}\n            </p>\n          </div>\n        ) : (\n          <div className="flex justify-center w-max py-1.5 px-2 bg-[#EA5355] rounded-lg">\n            <p className="text-sm text-white font-semibold text-center">\n              {" "}\n              {row.getValue("status")}\n            </p>\n          </div>\n        )}\n      </div>\n    ),\n  },\n  {\n    accessorKey: "employee",\n    header: ({ column, table }) => {\n      return (\n        <ColumnFilter\n          column={column}\n          table={table}\n          options={[\n            {\n              id: 1,\n              name: "John Doe",\n              value: "John Doe",\n              label: "John Doe",\n              avatar: "https://github.com/jaomateus.png",\n            },\n            {\n              id: 2,\n              name: "Diwanshu Midha",\n              value: "Diwanshu Midha",\n              label: "Diwanshu Midha",\n              avatar: "https://github.com/ranirosa.png",\n            },\n            {\n              id: 3,\n              name: "Brett",\n              value: "Brett",\n              label: "Brett",\n              avatar: "https://github.com/DanielaSimoes-WeAreMeta.png",\n            },\n          ]}\n        >\n          <Button className="p-0 text-body-large gap-2.5" variant="ghost">\n            <span>Employee</span>\n            <ChevronDown className="h-4 w-4" />\n          </Button>\n        </ColumnFilter>\n      );\n    },\n    meta: { type: "select" },\n\n    cell: ({ row }) => {\n      const fullData = row.original.employee;\n\n      return (\n        <div className="flex items-center gap-3">\n          <Avatar className="h-8 w-8">\n            <AvatarImage\n              className="object-cover"\n              src={fullData.avatar}\n              alt={fullData.name}\n              key={fullData.id}\n            />\n\n            <AvatarFallback>EP</AvatarFallback>\n          </Avatar>\n\n          <p className="text-body-small text-gray-700">{fullData.name}</p>\n        </div>\n      );\n    },\n  },\n  {\n    accessorKey: "date",\n    meta: { type: "date" },\n    header: ({ column, table }) => {\n      return (\n        <ColumnFilter column={column} table={table}>\n          <Button className="p-0 text-body-large gap-2.5" variant="ghost">\n            <span>Date</span>\n            <ChevronDown className="h-4 w-4" />\n          </Button>\n        </ColumnFilter>\n      );\n    },\n    cell: ({ row }) => (\n      <div className="lowercase text-gray-700">\n        {new Date(row.getValue("date")).toLocaleString("en-GB", {\n          day: "numeric",\n          month: "short",\n          year: "numeric",\n        })}\n      </div>\n    ),\n  },\n  {\n    accessorKey: "is_active",\n    meta: { type: "boolean" },\n    header: ({ column, table }) => {\n      return (\n        <ColumnFilter column={column} table={table}>\n          <Button className="p-0 text-body-large gap-2.5" variant="ghost">\n            <span>Active</span>\n            <ChevronDown className="h-4 w-4" />\n          </Button>\n        </ColumnFilter>\n      );\n    },\n    cell: ({ row }) =>\n      row.getValue("is_active") ? (\n        <Check className="h-4 w-4" />\n      ) : (\n        <XCircle className="h-4 w-4" />\n      ),\n  },\n  {\n    accessorKey: "notes",\n    meta: { type: "string" },\n    header: ({ column, table }) => {\n      return (\n        <ColumnFilter column={column} table={table}>\n          <Button className="p-0 text-body-large gap-2.5" variant="ghost">\n            <span>Notes</span>\n            <ChevronDown className="h-4 w-4" />\n          </Button>\n        </ColumnFilter>\n      );\n    },\n    cell: ({ row }) => (\n      <div className="text-gray-700">{row.getValue("notes")}</div>\n    ),\n  },\n  {\n    accessorKey: "amount",\n    meta: { type: "number" },\n\n    header: ({ column, table }) => {\n      return (\n        <ColumnFilter column={column} table={table}>\n          <Button className="p-0 text-body-large gap-2.5" variant="ghost">\n            <span>Amount</span>\n            <ChevronDown className="h-4 w-4" />\n          </Button>\n        </ColumnFilter>\n      );\n    },\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue("amount"));\n\n      // Format the amount as a dollar amount\n      const formatted = new Intl.NumberFormat("en-US", {\n        style: "currency",\n        currency: "USD",\n      }).format(amount);\n\n      return <div className="text-start text-gray-700">{formatted}</div>;\n    },\n  },\n  {\n    id: "actions",\n    meta: { type: "actions" },\n    enableHiding: false,\n    cell: ({ row }) => {\n      const payment = row.original;\n\n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant="ghost" className="h-8 w-8 p-0">\n              <span className="sr-only">Open menu</span>\n              <MoreHorizontal />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align="start">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={() => navigator.clipboard.writeText(payment.id)}\n            >\n              Copy payment ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View customer</DropdownMenuItem>\n            <DropdownMenuItem>View payment details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      );\n    },\n  },\n];\n',
        path: "block/data-table/columns.tsx",
        target: "components/block/data-table/columns.tsx",
      },
      {
        type: "registry:block",
        content:
          '"use client";\n\nimport * as React from "react";\nimport { Column, Table } from "@tanstack/react-table";\nimport { MultiSelect } from "./multi-select";\nimport { Payment } from "./data-table";\n\nexport function ColumnFilter({\n  children,\n  column,\n  options,\n}: {\n  children: React.ReactNode;\n  column: Column<Payment>;\n  table: Table<Payment>;\n  options?: {\n    label: string;\n    value: string;\n    icon?: React.ComponentType<{ className?: string }>;\n    avatar?: string;\n    color?: string;\n    reason?: string;\n    id: number;\n    name: string;\n  }[];\n}) {\n  const [selectOptions, setSelectOptions] = React.useState(options);\n\n  const handleFunction = () => {\n    console.log("handleFunction");\n  };\n\n  return (\n    <MultiSelect\n      options={selectOptions || []}\n      setSelectOptions={setSelectOptions}\n      onValueChange={handleFunction}\n      defaultValue={[]}\n      variant="inverted"\n      animation={2}\n      maxCount={3}\n      trigger={children}\n      handlePinColumn={handleFunction}\n      column={column}\n      handleUnpinColumn={handleFunction}\n      handleSorting={handleFunction}\n      handleDateSelect={handleFunction}\n      clearFilter={handleFunction}\n      handleTagSelect={handleFunction}\n      filters={null}\n    />\n  );\n}\n',
        path: "block/data-table/column-filter.tsx",
        target: "components/block/data-table/column-filter.tsx",
      },
      {
        type: "registry:block",
        content:
          '// src/components/multi-select.tsx\n\nimport * as React from "react";\nimport { cva, type VariantProps } from "class-variance-authority";\nimport { CheckIcon, Pin, Tag } from "lucide-react";\nimport { parseISO } from "date-fns";\n\nimport { cn } from "@/lib/utils";\nimport { Separator } from "@/components/ui/separator";\nimport { Button } from "@/components/ui/button";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from "@/components/ui/popover";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from "@/components/ui/command";\nimport { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";\nimport { ChevronDownIcon, ChevronUpIcon } from "@radix-ui/react-icons";\nimport { Calendar } from "@/components/ui/calendar";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from "@/components/ui/select";\nimport { Input } from "./table-input";\nimport { PopoverSkeleton } from "./popover-skeleton";\nimport { Column } from "@tanstack/react-table";\nimport { Payment } from "./data-table";\n\n/**\n * Variants for the multi-select component to handle different styles.\n * Uses class-variance-authority (cva) to define different styles based on "variant" prop.\n */\n\nconst multiSelectVariants = cva(\n  "m-1 transition ease-in-out delay-150 hover:-translate-y-1 hover:scale-110 duration-300",\n  {\n    variants: {\n      variant: {\n        default:\n          "border-foreground/10 text-foreground bg-card hover:bg-card/80",\n        secondary:\n          "border-foreground/10 bg-secondary text-secondary-foreground hover:bg-secondary/80",\n        destructive:\n          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",\n        inverted: "inverted",\n      },\n    },\n    defaultVariants: {\n      variant: "default",\n    },\n  }\n);\n\n/**\n * Props for MultiSelect component\n */\ninterface MultiSelectProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof multiSelectVariants> {\n  /**\n   * An array of option objects to be displayed in the multi-select component.\n   * Each option object has a label, value, and an optional icon.\n   */\n  options: {\n    /** The text to display for the option. */\n    label: string;\n    /** The unique value associated with the option. */\n    value: string;\n    /** Optional icon component to display alongside the option. */\n    icon?: React.ComponentType<{ className?: string }>;\n\n    avatar?: string;\n    color?: string;\n    reason?: string;\n    id: number;\n    name: string;\n  }[];\n\n  /**\n   * Callback function triggered when the selected values change.\n   * Receives an array of the new selected values.\n   */\n  onValueChange: (value: any) => void;\n\n  /** The default selected values when the component mounts. */\n  defaultValue?: string[];\n\n  /**\n   * Placeholder text to be displayed when no values are selected.\n   * Optional, defaults to "Select options".\n   */\n  placeholder?: string;\n\n  /**\n   * Animation duration in seconds for the visual effects (e.g., bouncing badges).\n   * Optional, defaults to 0 (no animation).\n   */\n  animation?: number;\n\n  /**\n   * Maximum number of items to display. Extra selected items will be summarized.\n   * Optional, defaults to 3.\n   */\n  maxCount?: number;\n\n  /**\n   * The modality of the popover. When set to true, interaction with outside elements\n   * will be disabled and only popover content will be visible to screen readers.\n   * Optional, defaults to false.\n   */\n  modalPopover?: boolean;\n\n  /**\n   * If true, renders the multi-select component as a child of another component.\n   * Optional, defaults to false.\n   */\n  asChild?: boolean;\n\n  /**\n   * Additional class names to apply custom styles to the multi-select component.\n   * Optional, can be used to add custom styles.\n   */\n  className?: string;\n  trigger?: React.ReactNode;\n\n  handlePinColumn?: () => void;\n  handleUnpinColumn?: () => void;\n  handleSorting: any;\n  column: Column<Payment>;\n  handleDateSelect: (date: string) => void | null;\n  clearFilter: () => void;\n  handleTagSelect: (tag: any) => void;\n  filters?: any;\n  setSelectOptions: any;\n}\n\nexport const MultiSelect = React.forwardRef<\n  HTMLButtonElement,\n  MultiSelectProps\n>(\n  (\n    {\n      options,\n      onValueChange,\n\n      trigger,\n      handlePinColumn,\n      handleUnpinColumn,\n      handleDateSelect,\n      handleSorting,\n      clearFilter,\n      column,\n      filters,\n    },\n    ref\n  ) => {\n    // válidos para array de ids para as colunas do tipo customer, rhinos etc\n    const [selectedValues, setSelectedValues] = React.useState<any[]>([]);\n    const [selectedValuesTags, setSelectedValuesTags] = React.useState<any[]>(\n      []\n    );\n\n    // válido para valores únicos, que não são arrays\n\n    const [selectedValue, setSelectedValue] = React.useState<string>("");\n\n    const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\n    const [isPinned, setIsPinned] = React.useState(false);\n\n    const [minValue, setMinValue] = React.useState("");\n    const [maxValue, setMaxValue] = React.useState("");\n\n    const handleMinChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setMinValue(e.target.value);\n      toggleOptionForUniqueValues({ min: e.target.value, max: maxValue });\n    };\n\n    const handleMaxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setMaxValue(e.target.value);\n      toggleOptionForUniqueValues({ min: minValue, max: e.target.value });\n    };\n\n    React.useEffect(() => {\n      if (column) {\n        setIsPinned(column.getIsPinned() as boolean);\n      }\n    }, [column]);\n\n    const handleInputKeyDown = (\n      event: React.KeyboardEvent<HTMLInputElement>\n    ) => {\n      if (event.key === "Enter") {\n        setIsPopoverOpen(true);\n      } else if (event.key === "Backspace" && !event.currentTarget.value) {\n        const newSelectedValues = [...selectedValues];\n        newSelectedValues.pop();\n        setSelectedValues(newSelectedValues);\n        onValueChange(newSelectedValues);\n      }\n    };\n\n    const toggleOptionForArr = (option: { id: number; name: string }) => {\n      const newSelectedValues = selectedValues.some(\n        (value) => value.id === option.id\n      )\n        ? selectedValues.filter((value) => value.id !== option.id)\n        : [...selectedValues, option];\n      setSelectedValues(newSelectedValues);\n    };\n\n    const toggleOptionForTags = (option: { value: string; reason: string }) => {\n      const newSelectedValues = selectedValuesTags.some(\n        (item) => item.value === option.value\n      )\n        ? selectedValuesTags.filter((item) => item.value !== option.value)\n        : [...selectedValuesTags, option];\n      setSelectedValuesTags(newSelectedValues);\n    };\n    const toggleOptionForUniqueValues = (value: any) => {\n      setSelectedValue(value);\n    };\n\n    const handleTogglePopover = () => {\n      setIsPopoverOpen((prev) => !prev);\n    };\n\n    // ao fechar o popover eu faço o filtro\n    const handleClosePopover = (open: boolean) => {\n      setIsPopoverOpen(open);\n\n      // se tiver valores selecionados chamo a função que faz o fetch com os filtros\n      if (selectedValues.length > 0) {\n        onValueChange(selectedValues);\n      } else if (selectedValue) {\n        onValueChange(selectedValue);\n      } else if (minValue && maxValue) {\n        onValueChange({ min: minValue, max: maxValue });\n      } else if (selectedValuesTags.length > 0) {\n        onValueChange(selectedValuesTags);\n      }\n    };\n\n    return (\n      <Popover\n        open={isPopoverOpen}\n        onOpenChange={(open: boolean) => handleClosePopover(open)}\n        modal={true}\n      >\n        <PopoverTrigger asChild onClick={handleTogglePopover} ref={ref}>\n          {trigger}\n        </PopoverTrigger>\n        <PopoverContent\n          className="w-auto p-0"\n          align="start"\n          onEscapeKeyDown={() => setIsPopoverOpen(false)}\n        >\n          <Command>\n            {(column.columnDef?.meta as { type?: string })?.type !==\n              "actions" && (\n              <div className="flex justify-start border-b">\n                <Button\n                  variant="ghost"\n                  onClick={handleSorting}\n                  className="w-full"\n                >\n                  <span className="text-grey-text-body">\n                    Sort values {""}\n                    {column.getIsSorted() !== false ? (\n                      <span className="text-[#9797A5]">\n                        {column.getIsSorted() === "asc"\n                          ? "(ascending)"\n                          : "(descending)"}\n                      </span>\n                    ) : null}\n                  </span>\n\n                  <span className="flex flex-col gap-0">\n                    <ChevronUpIcon\n                      className={`w-4 h-4 -mb-2.5 ${\n                        column.getIsSorted() === "asc"\n                          ? "text-grey-text-body font-bold"\n                          : "text-grey-border-dis"\n                      }`}\n                    />\n                    <ChevronDownIcon\n                      className={`w-4 h-4 ${\n                        column.getIsSorted() === "desc"\n                          ? "text-grey-text-body font-bold"\n                          : "text-grey-border-dis"\n                      }`}\n                    />\n                  </span>\n                </Button>\n              </div>\n            )}\n\n            {(column.columnDef?.meta as { type?: string })?.type === "date" ? (\n              <div>\n                <Calendar\n                  onDayClick={(day) => handleDateSelect(day.toISOString())}\n                  selected={\n                    column.getFilterValue()\n                      ? parseISO(column.getFilterValue() as string)\n                      : new Date()\n                  }\n                  defaultMonth={\n                    column.getFilterValue()\n                      ? parseISO(column.getFilterValue() as string)\n                      : new Date()\n                  }\n                  className="button:bg-red-700"\n                />\n                <Separator />\n                <div>\n                  <div className="flex items-center justify-between">\n                    {isPinned ? (\n                      <Button\n                        variant="ghost"\n                        onClick={handleUnpinColumn}\n                        className="flex-1 justify-start cursor-pointer max-w-full"\n                      >\n                        <Pin className="h-4 w-4 mr-2" /> Unpin\n                      </Button>\n                    ) : (\n                      <Button\n                        variant="ghost"\n                        onClick={handlePinColumn}\n                        className="flex-1 justify-start cursor-pointer max-w-full"\n                      >\n                        <Pin className="h-4 w-4 mr-2" /> Pin to left\n                      </Button>\n                    )}\n\n                    {selectedValues.length > 0 && (\n                      <>\n                        <Separator\n                          orientation="vertical"\n                          className="flex min-h-6 h-full"\n                        />\n                        <Button\n                          variant="ghost"\n                          onClick={clearFilter}\n                          className="flex-1 justify-center cursor-pointer"\n                        >\n                          Clear\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ) : (column.columnDef?.meta as { type?: string })?.type ===\n              "boolean" ? (\n              <>\n                <CommandInput\n                  placeholder="Search"\n                  onKeyDown={handleInputKeyDown}\n                />\n                <CommandList>\n                  <CommandEmpty>No results found.</CommandEmpty>\n                  <CommandGroup className="max-h-[220px] max-w-[240px] overflow-y-auto">\n                    {/* <CommandItem key=\'all\' onSelect={toggleAll} className=\'cursor-pointer\'>\n                      <div\n                        className={cn(\n                          \'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\',\n                          selectedValues.length === options.length\n                            ? \'bg-primary text-primary-foreground\'\n                            : \'opacity-50 [&_svg]:invisible\'\n                        )}\n                      >\n                        <CheckIcon className=\'h-4 w-4\' />\n                      </div>\n                      <span className=\'text-body-small text-grey-text-body\'>Select All</span>\n                    </CommandItem> */}\n                    <CommandItem\n                      key="true"\n                      onSelect={() => toggleOptionForUniqueValues("true")}\n                      className="cursor-pointer"\n                    >\n                      <div\n                        className={cn(\n                          "mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary",\n                          selectedValue.includes("true")\n                            ? "bg-primary text-primary-foreground"\n                            : "opacity-50 [&_svg]:invisible"\n                        )}\n                      >\n                        <CheckIcon className="h-4 w-4" />\n                      </div>\n                      <span className="text-body-small text-grey-text-body">\n                        Yes\n                      </span>\n                    </CommandItem>\n\n                    <CommandItem\n                      key="false"\n                      onSelect={() => toggleOptionForUniqueValues("false")}\n                      className="cursor-pointer"\n                    >\n                      <div\n                        className={cn(\n                          "mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary",\n                          selectedValue.includes("false")\n                            ? "bg-primary text-primary-foreground"\n                            : "opacity-50 [&_svg]:invisible"\n                        )}\n                      >\n                        <CheckIcon className="h-4 w-4" />\n                      </div>\n                      <span className="text-body-small text-grey-text-body">\n                        No\n                      </span>\n                    </CommandItem>\n                  </CommandGroup>\n                  <CommandSeparator />\n                  <CommandGroup>\n                    <div className="flex items-center justify-between">\n                      {isPinned ? (\n                        <CommandItem\n                          onSelect={handleUnpinColumn}\n                          className="flex-1 justify-start cursor-pointer max-w-full"\n                        >\n                          <Pin className="h-4 w-4 mr-2" /> Unpin\n                        </CommandItem>\n                      ) : (\n                        <CommandItem\n                          onSelect={handlePinColumn}\n                          className="flex-1 justify-start cursor-pointer max-w-full"\n                        >\n                          <Pin className="h-4 w-4 mr-2" /> Pin to left\n                        </CommandItem>\n                      )}\n\n                      {selectedValues.length > 0 && (\n                        <>\n                          <Separator\n                            orientation="vertical"\n                            className="flex min-h-6 h-full"\n                          />\n                          <CommandItem\n                            onSelect={clearFilter}\n                            className="flex-1 justify-center cursor-pointer"\n                          >\n                            Clear\n                          </CommandItem>\n                        </>\n                      )}\n                    </div>\n                  </CommandGroup>\n                </CommandList>\n              </>\n            ) : (column.columnDef?.meta as { type?: string })?.type ===\n              "number" ? (\n              <>\n                <CommandList>\n                  <CommandGroup className="max-h-[220px] max-w-[240px] overflow-y-auto">\n                    <div className="flex items-center px-1 my-2">\n                      <Select defaultValue="equal">\n                        <SelectTrigger className="w-[60%] border-r-0 rounded-r-none">\n                          <SelectValue placeholder="Operator" />\n                        </SelectTrigger>\n                        <SelectContent className="w-[60%]">\n                          <SelectItem value="equal">Equal to</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <Input\n                        variant="inputWithSelect"\n                        onChange={(e) =>\n                          toggleOptionForUniqueValues(e.target.value)\n                        }\n                      />\n                    </div>\n                  </CommandGroup>\n                  <CommandSeparator />\n                  <CommandGroup>\n                    <div className="flex items-center justify-between">\n                      {isPinned ? (\n                        <CommandItem\n                          onSelect={handleUnpinColumn}\n                          className="flex-1 justify-start cursor-pointer max-w-full"\n                        >\n                          <Pin className="h-4 w-4 mr-2" /> Unpin\n                        </CommandItem>\n                      ) : (\n                        <CommandItem\n                          onSelect={handlePinColumn}\n                          className="flex-1 justify-start cursor-pointer max-w-full"\n                        >\n                          <Pin className="h-4 w-4 mr-2" /> Pin to left\n                        </CommandItem>\n                      )}\n\n                      {selectedValues.length > 0 && (\n                        <>\n                          <Separator\n                            orientation="vertical"\n                            className="flex min-h-6 h-full"\n                          />\n                          <CommandItem\n                            onSelect={clearFilter}\n                            className="flex-1 justify-center cursor-pointer"\n                          >\n                            Clear\n                          </CommandItem>\n                        </>\n                      )}\n                    </div>\n                  </CommandGroup>\n                </CommandList>\n              </>\n            ) : (column.columnDef?.meta as { type?: string })?.type ===\n              "range" ? (\n              <>\n                <CommandList>\n                  <CommandGroup className="max-h-[220px] max-w-[240px] overflow-y-auto">\n                    <div className="flex items-center px-1 my-2">\n                      <Select defaultValue="range">\n                        <SelectTrigger className="w-[60%] border-r-0 rounded-r-none">\n                          <SelectValue placeholder="Operator" />\n                        </SelectTrigger>\n                        <SelectContent className="w-[60%]">\n                          <SelectItem value="range">Range</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <div className="flex items-center">\n                        <Input\n                          variant="inputWithSelect"\n                          placeholder="Min"\n                          value={minValue}\n                          onChange={handleMinChange}\n                          className="w-[50%] border-r-0 rounded-r-none"\n                        />\n                        <Input\n                          variant="inputWithSelect"\n                          placeholder="Max"\n                          value={maxValue}\n                          onChange={handleMaxChange}\n                          className="w-[50%] rounded-l-none"\n                        />\n                      </div>\n                    </div>\n                  </CommandGroup>\n                  <CommandSeparator />\n                  <CommandGroup>\n                    <div className="flex items-center justify-between">\n                      {isPinned ? (\n                        <CommandItem\n                          onSelect={handleUnpinColumn}\n                          className="flex-1 justify-start cursor-pointer max-w-full"\n                        >\n                          <Pin className="h-4 w-4 mr-2" /> Unpin\n                        </CommandItem>\n                      ) : (\n                        <CommandItem\n                          onSelect={handlePinColumn}\n                          className="flex-1 justify-start cursor-pointer max-w-full"\n                        >\n                          <Pin className="h-4 w-4 mr-2" /> Pin to left\n                        </CommandItem>\n                      )}\n\n                      {selectedValues.length > 0 && (\n                        <>\n                          <Separator\n                            orientation="vertical"\n                            className="flex min-h-6 h-full"\n                          />\n                          <CommandItem\n                            onSelect={clearFilter}\n                            className="flex-1 justify-center cursor-pointer"\n                          >\n                            Clear\n                          </CommandItem>\n                        </>\n                      )}\n                    </div>\n                  </CommandGroup>\n                </CommandList>\n              </>\n            ) : (column.columnDef?.meta as { type?: string })?.type ===\n              "string" ? (\n              <>\n                <CommandList>\n                  <CommandGroup className="max-h-[220px] max-w-[240px] overflow-y-auto">\n                    <div className="flex items-center px-1 my-2">\n                      <Select defaultValue="contains">\n                        <SelectTrigger className="w-[60%] border-r-0 rounded-r-none">\n                          <SelectValue placeholder="Operator" />\n                        </SelectTrigger>\n                        <SelectContent className="w-[60%]">\n                          <SelectItem value="contains">Contains</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <Input\n                        variant="inputWithSelect"\n                        onChange={(e) =>\n                          toggleOptionForUniqueValues(e.target.value)\n                        }\n                      />\n                    </div>\n                  </CommandGroup>\n                  <CommandSeparator />\n                  <CommandGroup className="max-h-[220px] w-[240px] overflow-y-auto">\n                    <div className="flex w-full items-center justify-between">\n                      {isPinned ? (\n                        <CommandItem\n                          onSelect={handleUnpinColumn}\n                          className="flex-1 justify-start cursor-pointer max-w-full"\n                        >\n                          <Pin className="h-4 w-4 mr-2" /> Unpin\n                        </CommandItem>\n                      ) : (\n                        <CommandItem\n                          onSelect={handlePinColumn}\n                          className="flex-1 justify-start cursor-pointer max-w-full"\n                        >\n                          <Pin className="h-4 w-4 mr-2" /> Pin to left\n                        </CommandItem>\n                      )}\n\n                      {selectedValues.length > 0 && (\n                        <>\n                          <Separator\n                            orientation="vertical"\n                            className="flex min-h-6 h-full"\n                          />\n                          <CommandItem\n                            onSelect={clearFilter}\n                            className="flex-1 justify-center cursor-pointer"\n                          >\n                            Clear\n                          </CommandItem>\n                        </>\n                      )}\n                    </div>\n                  </CommandGroup>\n                </CommandList>\n              </>\n            ) : (column.columnDef?.meta as { type?: string })?.type ===\n              "actions" ? (\n              <>\n                <CommandInput\n                  placeholder="Search"\n                  onKeyDown={handleInputKeyDown}\n                />\n                <CommandList>\n                  <CommandEmpty>No results found.</CommandEmpty>\n\n                  <CommandGroup className="max-h-[220px] max-w-[240px] overflow-y-auto">\n                    {options.map((option, index) => {\n                      const isSelected = selectedValuesTags.some(\n                        (item: any) => item.value === option.value\n                      );\n                      // ||\n                      // filters.some(\n                      //   (filter: any) =>\n                      //     filter.key === \'tags\' && filter.value.some((item: any) => item.value === option.value)\n                      // )\n\n                      return (\n                        <>\n                          <CommandItem\n                            key={index}\n                            onSelect={() =>\n                              toggleOptionForTags({\n                                value: option.value,\n                                reason: option.reason as string,\n                              })\n                            }\n                            className="cursor-pointer"\n                          >\n                            <div\n                              className={cn(\n                                "mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary",\n                                isSelected\n                                  ? "bg-primary text-primary-foreground"\n                                  : "opacity-50 [&_svg]:invisible"\n                              )}\n                            >\n                              <CheckIcon className="h-4 w-4" />\n                            </div>\n\n                            <div className="flex items-center gap-3 w-full overflow-hidden">\n                              <Tag className="h-4 w-4" color={option.color} />\n\n                              <p\n                                title={option.reason}\n                                className="text-body-small text-grey-text-body truncate"\n                              >\n                                {option.reason}\n                              </p>\n                            </div>\n                          </CommandItem>\n                        </>\n                      );\n                    })}\n                  </CommandGroup>\n                  <CommandSeparator />\n                  <CommandGroup>\n                    <div className="flex items-center justify-between">\n                      {isPinned ? (\n                        <CommandItem\n                          onSelect={handleUnpinColumn}\n                          className="flex-1 justify-start cursor-pointer max-w-full"\n                        >\n                          <Pin className="h-4 w-4 mr-2" /> Unpin\n                        </CommandItem>\n                      ) : (\n                        <CommandItem\n                          onSelect={handlePinColumn}\n                          className="flex-1 justify-start cursor-pointer max-w-full"\n                        >\n                          <Pin className="h-4 w-4 mr-2" /> Pin to left\n                        </CommandItem>\n                      )}\n\n                      {selectedValues.length > 0 && (\n                        <>\n                          <Separator\n                            orientation="vertical"\n                            className="flex min-h-6 h-full"\n                          />\n                          <CommandItem\n                            onSelect={clearFilter}\n                            className="flex-1 justify-center cursor-pointer"\n                          >\n                            Clear\n                          </CommandItem>\n                        </>\n                      )}\n                    </div>\n                  </CommandGroup>\n                </CommandList>\n              </>\n            ) : (\n              <>\n                <CommandInput\n                  placeholder="Search"\n                  onKeyDown={handleInputKeyDown}\n                />\n                <CommandList>\n                  <CommandEmpty>No results found.</CommandEmpty>\n                  <CommandGroup className="max-h-[220px] max-w-[240px] overflow-y-auto">\n                    {options.length === 0 ? (\n                      <PopoverSkeleton />\n                    ) : (\n                      options.map((option) => {\n                        const isSelected =\n                          (filters &&\n                            filters.some(\n                              (filter: any) =>\n                                filter.key === column.id &&\n                                filter.value.id === option.id\n                            )) ||\n                          selectedValues.some(\n                            (value) => value.id === option.id\n                          );\n\n                        return (\n                          <>\n                            {option.avatar ? (\n                              <CommandItem\n                                key={option.id}\n                                onSelect={() =>\n                                  toggleOptionForArr({\n                                    id: option.id,\n                                    name: option.name,\n                                  })\n                                }\n                                className="cursor-pointer"\n                              >\n                                <div\n                                  className={cn(\n                                    "mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary",\n                                    isSelected\n                                      ? "bg-primary text-primary-foreground"\n                                      : "opacity-50 [&_svg]:invisible"\n                                  )}\n                                >\n                                  <CheckIcon className="h-4 w-4" />\n                                </div>\n\n                                <div className="flex items-center gap-3">\n                                  <Avatar className="h-8 w-8">\n                                    <AvatarImage\n                                      className="object-cover"\n                                      src={option.avatar}\n                                      alt={option.name}\n                                    />\n                                    <AvatarFallback></AvatarFallback>\n                                  </Avatar>\n                                  <p className="text-body-small text-grey-text-body">\n                                    {" "}\n                                    {option.name}\n                                  </p>\n                                </div>\n                              </CommandItem>\n                            ) : (\n                              <CommandItem\n                                key={option.id}\n                                onSelect={() =>\n                                  toggleOptionForArr({\n                                    id: option.id,\n                                    name: option.name,\n                                  })\n                                }\n                                className="cursor-pointer"\n                              >\n                                <div\n                                  className={cn(\n                                    "mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary",\n                                    isSelected\n                                      ? "bg-primary text-primary-foreground"\n                                      : "opacity-50 [&_svg]:invisible"\n                                  )}\n                                >\n                                  <CheckIcon className="h-4 w-4" />\n                                </div>\n\n                                <div className="flex items-center gap-3">\n                                  <p className="text-body-small text-grey-text-body">\n                                    {" "}\n                                    {option.name}\n                                  </p>\n                                </div>\n                              </CommandItem>\n                            )}\n                          </>\n                        );\n                      })\n                    )}\n                  </CommandGroup>\n                  <CommandSeparator />\n                  <CommandGroup>\n                    <div className="flex items-center justify-between">\n                      {isPinned ? (\n                        <CommandItem\n                          onSelect={handleUnpinColumn}\n                          className="flex-1 justify-start cursor-pointer max-w-full"\n                        >\n                          <Pin className="h-4 w-4 mr-2" /> Unpin\n                        </CommandItem>\n                      ) : (\n                        <CommandItem\n                          onSelect={handlePinColumn}\n                          className="flex-1 justify-start cursor-pointer max-w-full"\n                        >\n                          <Pin className="h-4 w-4 mr-2" /> Pin to left\n                        </CommandItem>\n                      )}\n\n                      {selectedValues.length > 0 && (\n                        <>\n                          <Separator\n                            orientation="vertical"\n                            className="flex min-h-6 h-full"\n                          />\n                          <CommandItem\n                            onSelect={clearFilter}\n                            className="flex-1 justify-center cursor-pointer"\n                          >\n                            Clear\n                          </CommandItem>\n                        </>\n                      )}\n                    </div>\n                  </CommandGroup>\n                </CommandList>\n              </>\n            )}\n          </Command>\n        </PopoverContent>\n      </Popover>\n    );\n  }\n);\n\nMultiSelect.displayName = "MultiSelect";\n',
        path: "block/data-table/multi-select.tsx",
        target: "components/block/data-table/multi-select.tsx",
      },
      {
        type: "registry:block",
        content:
          '"use client";\n\nimport * as React from "react";\nimport { cn } from "@/lib/utils";\nimport { LucideIcon } from "lucide-react";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  startIcon?: LucideIcon;\n  endIcon?: LucideIcon;\n  error?: boolean;\n  success?: boolean;\n  disabled?: boolean;\n  focused?: boolean;\n  label?: string;\n  helperText?: string;\n  /** Define the width of the input container, e.g. "500px", "100%", etc. */\n  width?: string;\n  variant?: "default" | "searchWithBadge" | "inputWithSelect" | "inputNote";\n  searchItem?: string;\n  searchFocus?: boolean;\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      className,\n      type,\n      startIcon,\n      error,\n      success,\n      disabled,\n      width,\n      value,\n      variant,\n      searchFocus,\n      focused,\n      ...props\n    },\n    ref\n  ) => {\n    if (variant === "searchWithBadge") {\n      const StartIcon = startIcon;\n\n      return (\n        <div\n          className={cn("flex flex-col items-start gap-1", className)}\n          style={{ width: width || "360px" }}\n        >\n          <div className="w-full relative">\n            {StartIcon && (\n              <div className="absolute left-2.5 top-1/2 transform -translate-y-1/2">\n                <StartIcon size={16} className="text-[#474752]" />\n              </div>\n            )}\n            <input\n              type={type}\n              disabled={disabled}\n              className={cn(\n                "flex h-9 w-full pl-8 rounded-md border border-input bg-transparent px-3 py-1 text-base transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-[#474752] focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",\n                className,\n                searchFocus ? "bg-prim-surf-subtle" : ""\n              )}\n              ref={ref}\n              {...props}\n            />\n          </div>\n\n          {props.helperText && (\n            <p\n              style={{\n                fontSize: "12px",\n              }}\n              className={cn(\n                "text-grey-text-caption",\n                error\n                  ? "text-error-text-label"\n                  : success\n                  ? "text-succ-text-label"\n                  : ""\n              )}\n            >\n              {props.helperText}\n            </p>\n          )}\n        </div>\n      );\n    } else if (variant === "inputWithSelect") {\n      return (\n        <input\n          type={type}\n          value={value}\n          className={cn(\n            "flex h-9 w-[40%] rounded-md border border-input rounded-l-none bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",\n            className\n          )}\n          ref={ref}\n          {...props}\n        />\n      );\n    } else if (variant === "inputNote") {\n      return (\n        <input\n          type={type}\n          value={value}\n          disabled={disabled}\n          tabIndex={disabled ? -1 : 0}\n          className={cn(\n            "flex w-full px-2 py-3 bg-transparent text-body-small rounded-md   transition-colors focus-visible:border file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-ring",\n            focused ? "border border-grey-border-medium" : "",\n            className\n          )}\n          ref={ref}\n          {...props}\n        />\n      );\n    } else {\n      return (\n        <input\n          type={type}\n          value={value}\n          className={cn(\n            "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-0 shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 text-body-small",\n            className\n          )}\n          ref={ref}\n          {...props}\n        />\n      );\n    }\n  }\n);\n\nInput.displayName = "Input";\n\nexport { Input };\n',
        path: "block/data-table/table-input.tsx",
        target: "components/block/data-table/table-input.tsx",
      },
      {
        type: "registry:block",
        content:
          "import { Skeleton } from '@/components/ui/skeleton'\n\nexport function PopoverSkeleton() {\n  return (\n    <div className='flex flex-col p-2 gap-2 h-[140px] w-[220px]'>\n      <Skeleton className='h-[20px] w-full' />\n      <Skeleton className='h-[20px] w-full' />\n      <Skeleton className='h-[20px] w-full' />\n      <Skeleton className='h-[20px] w-full' />\n      <Skeleton className='h-[20px] w-full' />\n    </div>\n  )\n}\n",
        path: "block/data-table/popover-skeleton.tsx",
        target: "components/block/data-table/popover-skeleton.tsx",
      },
    ],
    component: React.lazy(
      () => import("./preview/blocks/data-table/data-table")
    ),
  },
  "search-button": {
    name: "search-button",
    type: "registry:block",
    registryDependencies: ["input"],
    dependencies: ["lucide-react"],
    files: [
      {
        type: "registry:ui",
        content:
          '"use client";\nimport { Input } from "@/components/ui/input";\n\nimport { Search, X } from "lucide-react";\nimport * as React from "react";\n\nexport const SearchButton = () => {\n  const [searchFocus, setSearchFocus] = React.useState(false);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [searchItem, setSearchItem] = React.useState<string>("");\n  const [searchInput, setSearchInput] = React.useState("");\n  const [hasSearchFilter, setHasSearchFilter] = React.useState(false);\n\n  React.useEffect(() => {\n    if (searchItem) {\n      setHasSearchFilter(true);\n    }\n  }, [searchItem]);\n\n  React.useEffect(() => {\n    if (!hasSearchFilter) {\n      setSearchItem("");\n      setSearchInput("");\n      setSearchFocus(false);\n    }\n  }, [hasSearchFilter]);\n\n  return (\n    <div\n      className={`${\n        searchFocus ? "bg-prim-surf-subtle" : "bg-input-foreground border"\n      } flex border-none rounded p-input-field text-sm`}\n      style={{\n        display: "flex",\n        flexWrap: "wrap",\n        alignItems: "center",\n      }}\n      onClick={() => inputRef.current?.focus()}\n    >\n      {searchItem !== "" && hasSearchFilter ? (\n        <div className="flex items-center px-3 py-[0.45rem] w-fit gap-1 border border-input rounded-md bg-[#EFEFF1]">\n          <Search className="w-4 h-4" />\n          <p className="p-0">{searchItem}</p>\n          <X\n            className="remove w-4 h-4 cursor-pointer"\n            onClick={() => {\n              setSearchItem("");\n              setSearchFocus(false);\n            }}\n          />\n        </div>\n      ) : (\n        <div className="relative">\n          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4" />\n          <Input\n            className="pl-8"\n            ref={inputRef}\n            value={searchInput}\n            width={searchFocus ? "158px" : "100px"}\n            onBlur={() => {\n              setSearchItem(searchInput);\n              if (searchInput === "") setSearchFocus(false);\n            }}\n            onFocus={() => setSearchFocus(true)}\n            onChange={(e) => {\n              setSearchInput(e.target.value);\n            }}\n            onKeyDown={(e) => {\n              if (["Enter", ",", ";", " "].includes(e.key)) {\n                e.preventDefault();\n                setSearchItem(searchInput);\n              }\n            }}\n            placeholder={searchItem === "" && !hasSearchFilter ? "Search" : ""}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n',
        path: "ui/search-button.tsx",
        target: "components/ui/search-button.tsx",
      },
    ],
    component: React.lazy(() => import("./preview/ui/search-button")),
  },
} as const;
